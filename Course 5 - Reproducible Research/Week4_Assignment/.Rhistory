# sapply(split(DT$pwgtp15,DT$SEX),mean)
start_time <- Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
end_time <- Sys.time()
end_time - start_time # Answer 3
# tapply(DT$pwgtp15,DT$SEX,mean)
start_time <- Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
end_time <- Sys.time()
end_time - start_time # Answer 4
# mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
start_time <- Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
end_time <- Sys.time()
end_time - start_time # Answer 5
# rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
start_time <- Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
end_time <- Sys.time()
end_time - start_time # Answer 6
# rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
str(DT$SEX)
# rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT$SEX <- as.numeric(DT$SEX)
start_time <- Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
end_time <- Sys.time()
end_time - start_time # Answer 6
DT$SEX <- as.numeric(DT$SEX)
# DT[,mean(pwgtp15),by=SEX]
start_time <- Sys.time()
DT[,mean(pwgtp15),by=SEX]
end_time <- Sys.time()
end_time - start_time # Answer 1
# mean(DT$pwgtp15,by=DT$SEX)
start_time <- Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
end_time <- Sys.time()
end_time - start_time # Answer 2
# sapply(split(DT$pwgtp15,DT$SEX),mean)
start_time <- Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
end_time <- Sys.time()
end_time - start_time # Answer 3
# tapply(DT$pwgtp15,DT$SEX,mean)
start_time <- Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
end_time <- Sys.time()
end_time - start_time # Answer 4
# mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
start_time <- Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
end_time <- Sys.time()
end_time - start_time # Answer 5
# rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
start_time <- Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
end_time <- Sys.time()
end_time - start_time # Answer 6
## Q3 - Download the Excel spreadsheet on Natural Gas Aquisition Program here:
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx
fileUrlQ3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrlQ3, destfile = "q3.xlsx", method = "curl")
library(readxl)
dat <- read_excel("q3.xlsx", range = cell_rows(18:23))
dat <- dat[,c(7:15)]
## Q5 - Download the 2006 microdata survey about housing
# for the state of Idaho using download.file() from here:
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv
# using the fread() command load the data into an R object
fileUrlQ5 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrlQ5, destfile = "q5.csv", method = "curl")
library(data.table)
DT = fread('Q5.csv')
# DT[,mean(pwgtp15),by=SEX]
start_time <- Sys.time()
DT[,mean(pwgtp15),by=SEX]
end_time <- Sys.time()
end_time - start_time # Answer 1
# mean(DT$pwgtp15,by=DT$SEX)
start_time <- Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
end_time <- Sys.time()
end_time - start_time # Answer 2
# sapply(split(DT$pwgtp15,DT$SEX),mean)
start_time <- Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
end_time <- Sys.time()
end_time - start_time # Answer 3
# tapply(DT$pwgtp15,DT$SEX,mean)
start_time <- Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
end_time <- Sys.time()
end_time - start_time # Answer 4
# mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
start_time <- Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
end_time <- Sys.time()
end_time - start_time # Answer 5
# rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
start_time <- Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
end_time <- Sys.time()
end_time - start_time # Answer 6
system.time(DT[,mean(pwgtp15),by=SEX])
# tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
# mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
# mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
# tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
# DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
# mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
# sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
# tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
# Option 1: mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
# Option 2: DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
# Option 1: mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
# Option 3: rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
# Option 4: sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
# Option 5: mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
# Option 6: tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
fileUrlQ5 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrlQ5, destfile = "q5.csv", method = "curl")
library(data.table)
DT = fread('Q5.csv')
View(DT)
# Option 3: rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
# Option 3: rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
DT$SEX <- as.numeric(DT$SEX)
# Option 3: rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
# Option 3: rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(rowMeans(DT)[DT$SEX==1])
DT$SEX <- as.numeric(DT$SEX)
# Option 3: rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
# Option 5: mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
library(sqldf)
fileUrlQ2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrlQ2, destfile = "q1.csv", method = "curl")
acs <- read.csv("q2.csv")
download.file(fileUrlQ2, destfile = "q2.csv", method = "curl")
acs <- read.csv("q2.csv")
View(acs)
sqldf("select pwgtp1 from acs where AGEP < 50") # answer
answer_q2 <- sqldf("select pwgtp1 from acs where AGEP < 50") # answer
View(answer_q2)
answer_q2 <- sqldf("select pwgtp1, AGEP from acs where AGEP < 50") # answer
View(answer_q2)
## Q3
sqldf("select distinct AGEP from acs")
## Q3
sqldf("select distinct AGEP from acs order by AGEP")
sqldf("select unique * from acs")
## Q4
# How many characters are in the 10th, 20th, 30th and 100th lines of
# HTML from this page:
# url: http://biostat.jhsph.edu/~jleek/contact.html
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
## Q5
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n = 10)
lines
download.file(url, destfile = "q5.csv", method = "curl")
df_q5 <- read.csv("q5.csv")
View(df_q5)
download.file(fileUrl, destfile = "q5.for", method = "curl")
download.file(url, destfile = "q5.for", method = "curl")
q5_df <- read.fwf(file = "q5.for", widths = c(15, 4, 1, 3, 5, 4),
header = FALSE, sep = "\t", skip = 4)
View(q5_df)
sum(q5_df$V6)
install.packages('nlme')
install.packages('lattice')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
install.packages('ggplot2')
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(swirl)
swirl()
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
hc
plot(hc)
plot(as.dendrogram(hc))
plot(as.dendrogram(hc), abline(h=1.5, col = "blue"))
abline(h=1.5, col="blue")
abline(h=4, col = "red")
abline(h=.4, col = "red")
5
5
12
abline(h=0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
point(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min(distTmp))
apply(distTmp, 2, which.min)
point(x, y, pch = 19, cex = 2. col = cols1[newClust])
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
plot(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
p
points()
points(x,y,col=kmObj$cluster, pch = 19, cex = 2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex = 2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex = 2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex = 2)
dataMatrix
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd[,1:2]
svd2[,1:2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u %*% svd1$d %*% svd1$v
svd1$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- sdfsdg
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$subject)
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(x[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust((hclustering, lab.col = unclass(sub1$activity)))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist()
mdist <- dist(sub1[,10:12], maxCon)
mdist
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(1:2)], centers = 6)
kClust
kmeans
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$cluster)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$center[laying,1:12], pch = 19, ylab = "Laying Cluster")
plot(kClust$centers[laying, 1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
names
print(cnames)
cnames <- strsplit(cnames, split = "|", fixed = TRUE)
print(cnames)
make.names(cnames[[1]][wcol])
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$pm25
x0 <- pm0$Sample.Value
str(x0)
is.na(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
datest <- as.Date(as.character(pm1$Date))
dates <- as.Date(as.character(pm1$Date), format = '%Y%m%d')
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), format = '%Y%m%d')
head(dates)
hist(datest[negative], "month")
hist(dates[negative], "month")
str(site0)
intersect(site0, site1)
both <- intersect(site0, site1)
both
head(pm9)
head(pm0)
cnt0 <- subset(pm0, (pm0$State.Code == 36 & pm0$county.site %in% both))
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 36 & Site.Id == 2008)
pm0sub <- subset(cnt0, County.Code == 36 & Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1 , County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), format = '%Y%m%d')
dates1 <- as.Date(as.character(pm1sub$Date), format = '%Y%m%d')
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h=median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
swirl()
swirl()
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, split = "|", fixed = TRUE)
cnames
wcol
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
pm0
x0 <- pm0$Sample.Value
str(x0)
mean()
mean(is.na(x0))
names(pm1)
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 < -
negative <- x1 < 0
negative <- x1 < 0
di,
info()
sum(negative, na.rm = TRUE)
mean(sum(negative, na.rm = TRUE))
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "mont")
hist(dates[negative],"month")
str(site0)
both <- intersect(x0, x1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36, county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
county.code
pm0sub
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date()
dates0
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
plot
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot
plot(dates0, x0sub, pch = 20)
abline
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot
plot(dates1, x1sub, pch = 20)
abline
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(names(mn0), mean(mn0))
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
plot
with(mrg, points(rep(2, 52), mrg[, 3]))
segments
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y,]
setwd("~/Data Science Projects/Coursera/Coursera-JHU-Data-Science-Specialization/Course 5 - Reproducible Research/Week4_Assignment")
storm <- read.csv("repdata_data_StormData.csv.bz2")
View(storm)
library("data.table")
library("ggplot2")
storm <- read.csv("repdata_data_StormData.csv.bz2")
head(storm)
View(storm)
library("dplyr")
library("ggplot2")
storm <- read.csv("repdata_data_StormData.csv.bz2")
storm <- storm[ , c(8, 23:28)]
head(storm)
